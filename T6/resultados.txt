Sistema operativo utilizado
Linux debian11mate 5.10.0-26-amd64 #1 SMP Debian 5.10.197-1 (2023-09-29) x86_64 GNU/Linux
==== run-san ====
gcc -g -DSAN=1 -fsanitize=address -fsanitize=undefined -Wall -Werror -pedantic -std=c18  test-batch.c batch.c pss.c spinlocks.c swap-x86_64.s -lm -lpthread -o batch.bin-san
./batch.bin-san
Prueba con spinlocks implementados con mutex sin busywaiting
Test secuencial: 1 solo job a la vez
Tiempo transcurrido: 1203 milisegundos

Deteniendo el sistema batch
----------------------------------------

Test paralelo: 2 jobs simultaneos
Tiempo transcurrido: 805 milisegundos
----------------------------------------

Test paralelo: 100 jobs y 10 threads
Tiempo transcurrido: 4023 milisegundos
----------------------------------------

Test del orden de llegada: 10 jobs separados por 400 milisegundos
Tiempo transcurrido: 8090 milisegundos
----------------------------------------

Cada '.' corresponde a 1000 jobs lanzados
Cada ':' corresponde a 1000 jobs terminados
Cada '-' corresponde a 1000 waitJob completados
El '$' corresponde a la llamada de stopBatch

test de robustez con 4 threads y 50 jobs
creando jobs

esperando jobs
$
Tiempo transcurrido: 3 milisegundos
test de robustez con 20 threads y 200 jobs
creando jobs

esperando jobs
$
Tiempo transcurrido: 8 milisegundos
test de robustez con 40 threads y 1000 jobs
creando jobs
:.$-
esperando jobs

Tiempo transcurrido: 182 milisegundos

===============================================
Prueba con spinlocks verdaderos con busywaiting
===============================================

Test secuencial: 1 solo job a la vez
Tiempo transcurrido: 1207 milisegundos

Deteniendo el sistema batch
----------------------------------------

Test paralelo: 2 jobs simultaneos
Tiempo transcurrido: 800 milisegundos
----------------------------------------

Test paralelo: 100 jobs y 10 threads
Tiempo transcurrido: 4035 milisegundos
----------------------------------------

Test del orden de llegada: 10 jobs separados por 400 milisegundos
Tiempo transcurrido: 8035 milisegundos
----------------------------------------

Cada '.' corresponde a 1000 jobs lanzados
Cada ':' corresponde a 1000 jobs terminados
Cada '-' corresponde a 1000 waitJob completados
El '$' corresponde a la llamada de stopBatch

test de robustez con 4 threads y 50 jobs
creando jobs

esperando jobs
$
Tiempo transcurrido: 3 milisegundos
test de robustez con 20 threads y 200 jobs
creando jobs

esperando jobs
$
Tiempo transcurrido: 949 milisegundos
test de robustez con 40 threads y 1000 jobs
creando jobs
:.-
esperando jobs
$
Tiempo transcurrido: 2539 milisegundos
Felicitaciones.  Su tarea paso todos los tests
==== run-thr ====
gcc -g -DSAN=1 -DSANTHR -fsanitize=thread -Wall -Werror -pedantic -std=c18  test-batch.c batch.c pss.c spinlocks.c swap-x86_64.s -lm -lpthread -o batch.bin-thr
./batch.bin-thr sin busy waiting
Prueba con spinlocks implementados con mutex sin busywaiting
Test secuencial: 1 solo job a la vez
Tiempo transcurrido: 1225 milisegundos

Deteniendo el sistema batch
----------------------------------------

Test paralelo: 2 jobs simultaneos
Tiempo transcurrido: 812 milisegundos
----------------------------------------

Test paralelo: 100 jobs y 10 threads
Tiempo transcurrido: 4022 milisegundos
----------------------------------------

Test del orden de llegada: 10 jobs separados por 400 milisegundos
Tiempo transcurrido: 8022 milisegundos
----------------------------------------

Cada '.' corresponde a 1000 jobs lanzados
Cada ':' corresponde a 1000 jobs terminados
Cada '-' corresponde a 1000 waitJob completados
El '$' corresponde a la llamada de stopBatch

test de robustez con 4 threads y 50 jobs
creando jobs

esperando jobs
$
Tiempo transcurrido: 6 milisegundos
test de robustez con 20 threads y 200 jobs
creando jobs

esperando jobs
$
Tiempo transcurrido: 25 milisegundos
test de robustez con 40 threads y 1000 jobs
creando jobs
:.$-
esperando jobs

Tiempo transcurrido: 188 milisegundos
Felicitaciones.  Su tarea paso todos los tests
==== run-g ====
gcc -g -Wall -Werror -pedantic -std=c18  test-batch.c batch.c pss.c spinlocks.c swap-x86_64.s -lm -lpthread -o batch.bin-g
./batch.bin-g
Prueba con spinlocks implementados con mutex sin busywaiting
Test secuencial: 1 solo job a la vez
Tiempo transcurrido: 1207 milisegundos

Deteniendo el sistema batch
----------------------------------------

Test paralelo: 2 jobs simultaneos
Tiempo transcurrido: 806 milisegundos
----------------------------------------

Test paralelo: 100 jobs y 10 threads
Tiempo transcurrido: 4016 milisegundos
----------------------------------------

Test del orden de llegada: 10 jobs separados por 400 milisegundos
Tiempo transcurrido: 8035 milisegundos
----------------------------------------

Cada '.' corresponde a 1000 jobs lanzados
Cada ':' corresponde a 1000 jobs terminados
Cada '-' corresponde a 1000 waitJob completados
El '$' corresponde a la llamada de stopBatch

test de robustez con 4 threads y 50 jobs
creando jobs
$
esperando jobs

Tiempo transcurrido: 110 milisegundos
test de robustez con 20 threads y 200 jobs
creando jobs
$
esperando jobs

Tiempo transcurrido: 208 milisegundos
test de robustez con 40 threads y 1000 jobs
creando jobs
:.$-
esperando jobs

Tiempo transcurrido: 218 milisegundos

===============================================
Prueba con spinlocks verdaderos con busywaiting
===============================================

Test secuencial: 1 solo job a la vez
Tiempo transcurrido: 1205 milisegundos

Deteniendo el sistema batch
----------------------------------------

Test paralelo: 2 jobs simultaneos
Tiempo transcurrido: 803 milisegundos
----------------------------------------

Test paralelo: 100 jobs y 10 threads
Tiempo transcurrido: 4020 milisegundos
----------------------------------------

Test del orden de llegada: 10 jobs separados por 400 milisegundos
Tiempo transcurrido: 8013 milisegundos
----------------------------------------

Cada '.' corresponde a 1000 jobs lanzados
Cada ':' corresponde a 1000 jobs terminados
Cada '-' corresponde a 1000 waitJob completados
El '$' corresponde a la llamada de stopBatch

test de robustez con 4 threads y 50 jobs
creando jobs
$
esperando jobs

Tiempo transcurrido: 102 milisegundos
test de robustez con 20 threads y 200 jobs
creando jobs
$
esperando jobs

Tiempo transcurrido: 208 milisegundos
test de robustez con 40 threads y 1000 jobs
creando jobs
:$.-
esperando jobs

Tiempo transcurrido: 207 milisegundos
Felicitaciones.  Su tarea paso todos los tests
==== run ====
gcc -O -DOPT=1 -Wall -Werror -pedantic -std=c18  test-batch.c batch.c pss.c spinlocks.c swap-x86_64.s -lm -lpthread -o batch.bin
./batch.bin
Prueba con spinlocks implementados con mutex sin busywaiting
Test secuencial: 1 solo job a la vez
Tiempo transcurrido: 1205 milisegundos

Deteniendo el sistema batch
----------------------------------------

Test paralelo: 2 jobs simultaneos
Tiempo transcurrido: 802 milisegundos
----------------------------------------

Test paralelo: 100 jobs y 10 threads
Tiempo transcurrido: 4019 milisegundos
----------------------------------------

Test del orden de llegada: 10 jobs separados por 400 milisegundos
Tiempo transcurrido: 8043 milisegundos
----------------------------------------

Cada '.' corresponde a 1000 jobs lanzados
Cada ':' corresponde a 1000 jobs terminados
Cada '-' corresponde a 1000 waitJob completados
El '$' corresponde a la llamada de stopBatch

test de robustez con 4 threads y 50 jobs
creando jobs
$
esperando jobs

Tiempo transcurrido: 102 milisegundos
test de robustez con 20 threads y 200 jobs
creando jobs
$
esperando jobs

Tiempo transcurrido: 111 milisegundos
test de robustez con 40 threads y 1000 jobs
creando jobs
:.$-
esperando jobs

Tiempo transcurrido: 222 milisegundos

===============================================
Prueba con spinlocks verdaderos con busywaiting
===============================================

Test secuencial: 1 solo job a la vez
Tiempo transcurrido: 1203 milisegundos

Deteniendo el sistema batch
----------------------------------------

Test paralelo: 2 jobs simultaneos
Tiempo transcurrido: 801 milisegundos
----------------------------------------

Test paralelo: 100 jobs y 10 threads
Tiempo transcurrido: 4036 milisegundos
----------------------------------------

Test del orden de llegada: 10 jobs separados por 400 milisegundos
Tiempo transcurrido: 8023 milisegundos
----------------------------------------

Cada '.' corresponde a 1000 jobs lanzados
Cada ':' corresponde a 1000 jobs terminados
Cada '-' corresponde a 1000 waitJob completados
El '$' corresponde a la llamada de stopBatch

test de robustez con 4 threads y 50 jobs
creando jobs
$
esperando jobs

Tiempo transcurrido: 206 milisegundos
test de robustez con 20 threads y 200 jobs
creando jobs
$
esperando jobs

Tiempo transcurrido: 213 milisegundos
test de robustez con 40 threads y 1000 jobs
creando jobs
:$.-
esperando jobs

Tiempo transcurrido: 213 milisegundos
Felicitaciones.  Su tarea paso todos los tests
